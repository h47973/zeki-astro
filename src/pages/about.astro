---
import BaseLayout from '../layouts/BaseLayout.astro';

const stats = [
  { value: "2020", label: "Founded" },
  { value: "50+", label: "Projects Delivered" },
  { value: "98%", label: "Client Satisfaction" },
  { value: "24/7", label: "Support Available" }
];

const values = [
  {
    title: "Quality First",
    description: "We deliver solutions that exceed expectations and stand the test of time.",
    icon: "‚≠ê"
  },
  {
    title: "Fast Matching", 
    description: "Connect with industry-leading developers within 24 hours of your request.",
    icon: "‚ö°"
  },
  {
    title: "Global Reach",
    description: "Hand-vetted professionals across multiple timezones to match your work model.",
    icon: "üåç"
  },
  {
    title: "Transparent Process",
    description: "Clear communication and seamless experience from vetting to project completion.",
    icon: "üîç"
  }
];

const technologies = [
  {
    category: "Frontend",
    items: ["React", "Vue.js", "Angular", "TypeScript", "Next.js", "Tailwind CSS"]
  },
  {
    category: "Backend", 
    items: ["Node.js", "Python", "Laravel", "Ruby on Rails", "Spring Boot", "GraphQL"]
  },
  {
    category: "Mobile",
    items: ["React Native", "Flutter", "Swift", "Kotlin", "Xamarin", "Ionic"]
  },
  {
    category: "Cloud & DevOps",
    items: ["AWS", "Azure", "Docker", "Kubernetes", "Terraform", "Jenkins"]
  }
];
---

<BaseLayout title="About">
  <!-- Hero Section with Particle Animation -->
  <section class="relative min-h-screen flex items-center justify-center overflow-hidden bg-gradient-to-br from-gray-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-blue-900">
    <!-- Animated Particles Background -->
    <div id="particles-container" class="absolute inset-0">
      <canvas id="particles-canvas" class="w-full h-full"></canvas>
    </div>
    
    <!-- Floating Geometric Shapes -->
    <div class="absolute inset-0">
      <div class="floating-shape shape-1"></div>
      <div class="floating-shape shape-2"></div>
      <div class="floating-shape shape-3"></div>
      <div class="floating-shape shape-4"></div>
      <div class="floating-shape shape-5"></div>
    </div>
    
    <div class="relative z-10 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <!-- Animated Badge -->
      <div class="animated-badge mb-8">
        <span class="pulse-dot"></span>
        Building the future of development teams
      </div>
      
      <!-- Main Title with Letter Animation -->
      <h1 class="hero-title mb-6">
        <span class="title-line">About Zeki Experts</span>
      </h1>
      
      <!-- Animated Subtitle -->
      <p class="hero-subtitle mb-12">
        We're not just another development agency. We're the bridge between your vision 
        and the world's best development talent.
      </p>
      
      <!-- Animated Stats -->
      <div class="stats-container">
        {stats.map((stat, index) => (
          <div class="stat-item" data-aos="zoom-in" data-aos-delay={index * 100}>
            <div class="stat-value">{stat.value}</div>
            <div class="stat-label">{stat.label}</div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- Story Section with Morphing Backgrounds -->
  <section class="py-32 bg-white dark:bg-gray-900 relative overflow-hidden">
    <!-- Morphing Background Shapes -->
    <div class="absolute inset-0">
      <div class="morph-shape morph-1"></div>
      <div class="morph-shape morph-2"></div>
    </div>
    
    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-20 items-center">
        <!-- Text Content -->
        <div class="space-y-8">
          <div class="section-header">
            <h2 class="section-title">Our Mission</h2>
            <div class="title-underline"></div>
          </div>
          
          <div class="story-text">
            <p class="story-paragraph">
              Zeki Experts was born from a simple observation: the best developers and the companies that need them 
              often never meet. Traditional hiring is broken ‚Äì it's slow, expensive, and often misses the mark.
            </p>
            
            <p class="story-paragraph">
              We built a platform that changes everything. Instead of months of interviews and uncertainty, 
              you get matched with pre-vetted, timezone-aligned developers in 24 hours. It's not magic ‚Äì 
              it's just a better way.
            </p>
            
            <p class="story-paragraph">
              Every developer in our network has been rigorously tested not just for technical skills, 
              but for communication, reliability, and cultural fit. When you work with us, 
              you're getting the top 1% of global development talent.
            </p>
          </div>
        </div>
        
        <!-- Interactive Feature Cards -->
        <div class="feature-cards-container">
          <div class="feature-card card-1">
            <div class="feature-icon">üéØ</div>
            <h3>Precision Matching</h3>
            <p>AI-powered algorithm matches your exact requirements</p>
          </div>
          
          <div class="feature-card card-2">
            <div class="feature-icon">‚ö°</div>
            <h3>Lightning Fast</h3>
            <p>Get matched and start working within 24 hours</p>
          </div>
          
          <div class="feature-card card-3">
            <div class="feature-icon">üõ°Ô∏è</div>
            <h3>Risk-Free</h3>
            <p>100% satisfaction guarantee on every placement</p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Values Section with Staggered Animations -->
  <section class="py-32 bg-gray-50 dark:bg-gray-800 relative overflow-hidden">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-20">
        <h2 class="section-title mb-6">Our Values</h2>
        <p class="section-subtitle">
          The principles that guide every decision and every partnership
        </p>
      </div>
      
      <div class="values-grid">
        {values.map((value, index) => (
          <div class="value-card" data-tilt data-aos="fade-up" data-aos-delay={index * 150}>
            <div class="value-icon">{value.icon}</div>
            <h3 class="value-title">{value.title}</h3>
            <p class="value-description">{value.description}</p>
            <div class="value-glow"></div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- Technology Stack with 3D Effects -->
  <section class="py-32 bg-white dark:bg-gray-900 relative overflow-hidden">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-20">
        <h2 class="section-title mb-6">Technology Expertise</h2>
        <p class="section-subtitle">
          Our developers master the technologies that power modern applications
        </p>
      </div>
      
      <div class="tech-grid">
        {technologies.map((tech, index) => (
          <div class="tech-category" data-aos="zoom-in" data-aos-delay={index * 100}>
            <h3 class="tech-title">{tech.category}</h3>
            <div class="tech-items">
              {tech.items.map((item, itemIndex) => (
                <div class="tech-item" style={`animation-delay: ${(index * 6 + itemIndex) * 100}ms`}>
                  {item}
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- CTA Section with Gradient Animation -->
  <section class="py-32 bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 relative overflow-hidden animated-gradient">
    <!-- Animated Background Pattern -->
    <div class="absolute inset-0 opacity-20">
      <div class="animated-pattern"></div>
    </div>
    
    <div class="relative z-10 max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h2 class="cta-title mb-8">
        Ready to Transform Your Team?
      </h2>
      <p class="cta-subtitle mb-12">
        Join hundreds of companies who've accelerated their development with our expert talent network
      </p>
      
      <div class="cta-buttons">
        <a href="/contact" class="cta-primary">
          <span>Start Your Project</span>
          <div class="button-shine"></div>
        </a>
        
        <div class="contact-info">
          <span>Call us: </span>
          <a href="tel:+12029925235" class="phone-link">+1 (202) 992-5235</a>
        </div>
      </div>
    </div>
  </section>

  <!-- Advanced Styles with Animations -->
  <style>
    /* Particle System Styles */
    #particles-canvas {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;
    }
    
    /* Floating Geometric Shapes */
    .floating-shape {
      position: absolute;
      background: linear-gradient(45deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.1));
      border-radius: 50%;
      animation: float-complex 20s infinite ease-in-out;
      backdrop-filter: blur(10px);
    }
    
    .shape-1 { width: 100px; height: 100px; top: 10%; left: 10%; animation-delay: 0s; }
    .shape-2 { width: 150px; height: 150px; top: 20%; right: 15%; animation-delay: 4s; }
    .shape-3 { width: 80px; height: 80px; top: 60%; left: 20%; animation-delay: 8s; }
    .shape-4 { width: 120px; height: 120px; top: 70%; right: 30%; animation-delay: 12s; }
    .shape-5 { width: 90px; height: 90px; top: 40%; left: 50%; animation-delay: 16s; }
    
    @keyframes float-complex {
      0%, 100% { transform: translate(0px, 0px) rotate(0deg) scale(1); opacity: 0.3; }
      25% { transform: translate(30px, -30px) rotate(90deg) scale(1.1); opacity: 0.6; }
      50% { transform: translate(-20px, 40px) rotate(180deg) scale(0.9); opacity: 0.4; }
      75% { transform: translate(40px, 20px) rotate(270deg) scale(1.05); opacity: 0.7; }
    }
    
    /* Animated Badge */
    .animated-badge {
      display: inline-flex;
      align-items: center;
      padding: 12px 24px;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 50px;
      color: #3b82f6;
      font-weight: 600;
      animation: badge-glow 3s ease-in-out infinite;
    }
    
    .dark .animated-badge {
      color: #60a5fa;
    }
    
    .pulse-dot {
      width: 8px;
      height: 8px;
      background: #3b82f6;
      border-radius: 50%;
      margin-right: 12px;
      animation: pulse-dot 2s ease-in-out infinite;
    }
    
    @keyframes badge-glow {
      0%, 100% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.3); }
      50% { box-shadow: 0 0 40px rgba(59, 130, 246, 0.6); }
    }
    
    @keyframes pulse-dot {
      0%, 100% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.2); opacity: 0.7; }
    }
    
    /* Hero Title Animation */
    .hero-title {
      font-size: clamp(3rem, 8vw, 7rem);
      font-weight: 900;
      line-height: 1.1;
      color: #1f2937;
      text-align: center;
      overflow: hidden;
    }
    
    .dark .hero-title {
      color: #ffffff;
    }
    
    .title-line {
      display: block;
      animation: slide-up 1.2s cubic-bezier(0.23, 1, 0.32, 1);
    }
    
    @keyframes slide-up {
      0% { transform: translateY(100%); opacity: 0; }
      100% { transform: translateY(0); opacity: 1; }
    }
    
    /* Hero Subtitle */
    .hero-subtitle {
      font-size: clamp(1.125rem, 3vw, 1.5rem);
      color: #6b7280;
      max-width: 800px;
      margin: 0 auto;
      animation: fade-in-up 1.5s cubic-bezier(0.23, 1, 0.32, 1) 0.3s both;
    }
    
    .dark .hero-subtitle {
      color: #ffffff !important;
      font-weight: 500;
    }
    
    @keyframes fade-in-up {
      0% { transform: translateY(30px); opacity: 0; }
      100% { transform: translateY(0); opacity: 1; }
    }
    
    /* Stats Container */
    .stats-container {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 2rem;
      max-width: 800px;
      margin: 0 auto;
    }
    
    .stat-item {
      text-align: center;
      padding: 1.5rem;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      animation: stat-float 3s ease-in-out infinite;
    }
    
    .stat-item:nth-child(1) { animation-delay: 0s; }
    .stat-item:nth-child(2) { animation-delay: 0.5s; }
    .stat-item:nth-child(3) { animation-delay: 1s; }
    .stat-item:nth-child(4) { animation-delay: 1.5s; }
    
    .stat-item:hover {
      transform: translateY(-10px) scale(1.05);
      box-shadow: 0 20px 40px rgba(59, 130, 246, 0.3);
    }
    
    .stat-value {
      font-size: 2.5rem;
      font-weight: 900;
      background: linear-gradient(45deg, #3b82f6, #8b5cf6);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 0.5rem;
    }
    
    .stat-label {
      color: rgba(255, 255, 255, 0.8);
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    .dark .stat-label {
      color: rgba(255, 255, 255, 0.7);
    }
    
    @keyframes stat-float {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-5px); }
    }
    
    /* Morphing Background Shapes */
    .morph-shape {
      position: absolute;
      border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
      animation: morph 15s ease-in-out infinite;
      opacity: 0.05;
    }
    
    .dark .morph-shape {
      opacity: 0.1;
    }
    
    .morph-1 {
      width: 300px;
      height: 300px;
      background: linear-gradient(45deg, #3b82f6, #8b5cf6);
      top: 10%;
      left: 10%;
      animation-delay: 0s;
    }
    
    .morph-2 {
      width: 400px;
      height: 400px;
      background: linear-gradient(45deg, #06b6d4, #3b82f6);
      bottom: 10%;
      right: 10%;
      animation-delay: 7s;
    }
    
    @keyframes morph {
      0%, 100% { 
        border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
        transform: translate(0px, 0px) rotate(0deg);
      }
      50% { 
        border-radius: 30% 60% 70% 40% / 50% 60% 30% 60%;
        transform: translate(50px, -50px) rotate(180deg);
      }
    }
    
    /* Section Styling */
    .section-title {
      font-size: clamp(2.5rem, 6vw, 4rem);
      font-weight: 900;
      color: #1f2937;
      text-align: center;
      margin-bottom: 1rem;
    }
    
    .dark .section-title {
      color: #ffffff !important;
      text-shadow: 0 0 30px rgba(59, 130, 246, 0.5);
    }
    
    .section-subtitle {
      font-size: 1.25rem;
      color: #6b7280;
      text-align: center;
      max-width: 600px;
      margin: 0 auto;
    }
    
    .dark .section-subtitle {
      color: #ffffff !important;
      font-weight: 500;
    }
    
    .title-underline {
      width: 60px;
      height: 4px;
      background: linear-gradient(45deg, #3b82f6, #8b5cf6);
      margin: 1rem 0 2rem 0;
      border-radius: 2px;
      animation: expand 2s cubic-bezier(0.23, 1, 0.32, 1);
    }
    
    @keyframes expand {
      0% { width: 0; }
      100% { width: 60px; }
    }
    
    /* Story Text */
    .story-paragraph {
      font-size: 1.125rem;
      line-height: 1.7;
      color: #4b5563;
      margin-bottom: 1.5rem;
      animation: fade-in-up 1s cubic-bezier(0.23, 1, 0.32, 1);
    }
    
    .dark .story-paragraph {
      color: #ffffff !important;
      font-weight: 500;
    }
    
    .story-paragraph:nth-child(1) { animation-delay: 0.2s; }
    .story-paragraph:nth-child(2) { animation-delay: 0.4s; }
    .story-paragraph:nth-child(3) { animation-delay: 0.6s; }
    
    /* Feature Cards */
    .feature-cards-container {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
    
    .feature-card {
      padding: 2rem;
      background: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 20px;
      transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);
      animation: slide-in-right 1s cubic-bezier(0.23, 1, 0.32, 1);
    }
    
    .dark .feature-card {
      background: rgba(31, 41, 55, 0.8);
      border: 1px solid rgba(75, 85, 99, 0.3);
    }
    
    .card-1 { animation-delay: 0.2s; }
    .card-2 { animation-delay: 0.4s; }
    .card-3 { animation-delay: 0.6s; }
    
    .feature-card:hover {
      transform: translateX(10px) scale(1.02);
      box-shadow: 0 20px 40px rgba(59, 130, 246, 0.2);
    }
    
    .feature-icon {
      font-size: 2rem;
      margin-bottom: 1rem;
    }
    
    .feature-card h3 {
      font-size: 1.25rem;
      font-weight: 700;
      color: #1f2937;
      margin-bottom: 0.5rem;
    }
    
    .dark .feature-card h3 {
      color: #ffffff !important;
      text-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    
    .feature-card p {
      color: #6b7280;
      line-height: 1.6;
    }
    
    .dark .feature-card p {
      color: #ffffff !important;
      font-weight: 500;
    }
    
    @keyframes slide-in-right {
      0% { transform: translateX(50px); opacity: 0; }
      100% { transform: translateX(0); opacity: 1; }
    }
    
    /* Values Grid */
    .values-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
    }
    
    .value-card {
      position: relative;
      padding: 3rem 2rem;
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 24px;
      text-align: center;
      transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);
      overflow: hidden;
    }
    
    .dark .value-card {
      background: rgba(31, 41, 55, 0.9);
      border: 1px solid rgba(75, 85, 99, 0.3);
    }
    
    .value-card:hover {
      transform: translateY(-10px) scale(1.02);
      box-shadow: 0 25px 50px rgba(59, 130, 246, 0.25);
    }
    
    .value-icon {
      font-size: 3rem;
      margin-bottom: 1.5rem;
      animation: bounce-in 1s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }
    
    .value-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1f2937;
      margin-bottom: 1rem;
    }
    
    .dark .value-title {
      color: #ffffff !important;
      text-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    
    .value-description {
      color: #6b7280;
      line-height: 1.6;
    }
    
    .dark .value-description {
      color: #ffffff !important;
      font-weight: 500;
    }
    
    .value-glow {
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(59, 130, 246, 0.1), transparent);
      opacity: 0;
      transition: opacity 0.5s ease;
    }
    
    .value-card:hover .value-glow {
      opacity: 1;
    }
    
    @keyframes bounce-in {
      0% { transform: scale(0); }
      50% { transform: scale(1.2); }
      100% { transform: scale(1); }
    }
    
    /* Technology Grid */
    .tech-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 2rem;
    }
    
    .tech-category {
      padding: 2.5rem 2rem;
      background: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 20px;
      transition: all 0.3s ease;
    }
    
    .dark .tech-category {
      background: rgba(31, 41, 55, 0.8);
      border: 1px solid rgba(75, 85, 99, 0.3);
    }
    
    .tech-category:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
    }
    
    .tech-title {
      font-size: 1.25rem;
      font-weight: 700;
      color: #1f2937;
      margin-bottom: 1.5rem;
      text-align: center;
    }
    
    .dark .tech-title {
      color: #ffffff !important;
      text-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    
    .tech-items {
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
      justify-content: center;
    }
    
    .tech-item {
      padding: 0.5rem 1rem;
      background: rgba(59, 130, 246, 0.1);
      color: #3b82f6;
      border-radius: 25px;
      font-size: 0.875rem;
      font-weight: 500;
      border: 1px solid rgba(59, 130, 246, 0.2);
      animation: fade-in-scale 0.6s cubic-bezier(0.23, 1, 0.32, 1) both;
      transition: all 0.3s ease;
    }
    
    .dark .tech-item {
      background: rgba(59, 130, 246, 0.2);
      color: #60a5fa;
      border: 1px solid rgba(59, 130, 246, 0.3);
    }
    
    .tech-item:hover {
      transform: scale(1.1);
      background: rgba(59, 130, 246, 0.2);
      color: #1d4ed8;
    }
    
    .dark .tech-item:hover {
      background: rgba(59, 130, 246, 0.3);
      color: #93c5fd;
    }
    
    @keyframes fade-in-scale {
      0% { transform: scale(0.8); opacity: 0; }
      100% { transform: scale(1); opacity: 1; }
    }
    
    /* CTA Section */
    .animated-gradient {
      background-size: 400% 400%;
      animation: gradient-shift 8s ease infinite;
    }
    
    @keyframes gradient-shift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }
    
    .animated-pattern {
      width: 100%;
      height: 100%;
      background-image: 
        radial-gradient(circle at 25% 25%, rgba(255, 255, 255, 0.2) 2px, transparent 2px),
        radial-gradient(circle at 75% 75%, rgba(255, 255, 255, 0.2) 2px, transparent 2px);
      background-size: 60px 60px;
      animation: pattern-move 20s linear infinite;
    }
    
    @keyframes pattern-move {
      0% { transform: translate(0, 0); }
      100% { transform: translate(60px, 60px); }
    }
    
    .cta-title {
      font-size: clamp(2.5rem, 6vw, 4rem);
      font-weight: 900;
      color: white;
      text-align: center;
    }
    
    .cta-subtitle {
      font-size: 1.25rem;
      color: rgba(255, 255, 255, 0.9);
      text-align: center;
      max-width: 600px;
      margin: 0 auto;
    }
    
    .cta-buttons {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 2rem;
    }
    
    @media (min-width: 640px) {
      .cta-buttons {
        flex-direction: row;
        justify-content: center;
      }
    }
    
    .cta-primary {
      position: relative;
      display: inline-flex;
      align-items: center;
      padding: 1rem 2.5rem;
      background: rgba(255, 255, 255, 0.2);
      backdrop-filter: blur(20px);
      color: white;
      font-weight: 600;
      border-radius: 50px;
      border: 1px solid rgba(255, 255, 255, 0.3);
      text-decoration: none;
      transition: all 0.3s ease;
      overflow: hidden;
    }
    
    .cta-primary:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: translateY(-3px);
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
    }
    
    .button-shine {
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
      transform: rotate(45deg);
      transition: all 0.6s ease;
      opacity: 0;
    }
    
    .cta-primary:hover .button-shine {
      opacity: 1;
      transform: rotate(45deg) translate(50%, 50%);
    }
    
    .contact-info {
      color: rgba(255, 255, 255, 0.9);
    }
    
    .phone-link {
      color: white;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.3s ease;
    }
    
    .phone-link:hover {
      color: rgba(255, 255, 255, 0.8);
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
      .feature-cards-container {
        margin-top: 3rem;
      }
      
      .values-grid {
        grid-template-columns: 1fr;
      }
      
      .tech-grid {
        grid-template-columns: 1fr;
      }
    }
    
    /* Accessibility */
    @media (prefers-reduced-motion: reduce) {
      *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
    }
  </style>

  <!-- Advanced Particle System Script -->
  <script>
    // Particle System Implementation
    class ParticleSystem {
      constructor(canvas) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
        this.particles = [];
        this.particleCount = 50;
        this.mouse = { x: 0, y: 0 };
        this.init();
      }
      
      init() {
        this.resize();
        this.createParticles();
        this.bindEvents();
        this.animate();
      }
      
      resize() {
        this.canvas.width = this.canvas.offsetWidth;
        this.canvas.height = this.canvas.offsetHeight;
      }
      
      createParticles() {
        for (let i = 0; i < this.particleCount; i++) {
          this.particles.push({
            x: Math.random() * this.canvas.width,
            y: Math.random() * this.canvas.height,
            vx: (Math.random() - 0.5) * 0.5,
            vy: (Math.random() - 0.5) * 0.5,
            radius: Math.random() * 2 + 1,
            opacity: Math.random() * 0.5 + 0.2,
            color: `hsl(${200 + Math.random() * 60}, 70%, 60%)`
          });
        }
      }
      
      bindEvents() {
        window.addEventListener('resize', () => this.resize());
        this.canvas.addEventListener('mousemove', (e) => {
          const rect = this.canvas.getBoundingClientRect();
          this.mouse.x = e.clientX - rect.left;
          this.mouse.y = e.clientY - rect.top;
        });
      }
      
      updateParticles() {
        this.particles.forEach(particle => {
          particle.x += particle.vx;
          particle.y += particle.vy;
          
          // Mouse interaction
          const dx = this.mouse.x - particle.x;
          const dy = this.mouse.y - particle.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 100) {
            const force = (100 - distance) / 100;
            particle.vx += dx * force * 0.001;
            particle.vy += dy * force * 0.001;
          }
          
          // Boundary bounce
          if (particle.x <= 0 || particle.x >= this.canvas.width) {
            particle.vx *= -1;
          }
          if (particle.y <= 0 || particle.y >= this.canvas.height) {
            particle.vy *= -1;
          }
          
          // Keep particles within bounds
          particle.x = Math.max(0, Math.min(this.canvas.width, particle.x));
          particle.y = Math.max(0, Math.min(this.canvas.height, particle.y));
          
          // Damping
          particle.vx *= 0.99;
          particle.vy *= 0.99;
        });
      }
      
      drawParticles() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Draw connections
        this.particles.forEach((particle, i) => {
          this.particles.slice(i + 1).forEach(otherParticle => {
            const dx = particle.x - otherParticle.x;
            const dy = particle.y - otherParticle.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 120) {
              this.ctx.beginPath();
              this.ctx.strokeStyle = `rgba(59, 130, 246, ${(120 - distance) / 120 * 0.2})`;
              this.ctx.lineWidth = 1;
              this.ctx.moveTo(particle.x, particle.y);
              this.ctx.lineTo(otherParticle.x, otherParticle.y);
              this.ctx.stroke();
            }
          });
        });
        
        // Draw particles
        this.particles.forEach(particle => {
          this.ctx.beginPath();
          this.ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
          this.ctx.fillStyle = particle.color;
          this.ctx.globalAlpha = particle.opacity;
          this.ctx.fill();
          this.ctx.globalAlpha = 1;
        });
      }
      
      animate() {
        this.updateParticles();
        this.drawParticles();
        requestAnimationFrame(() => this.animate());
      }
    }
    
    // Initialize particle system
    document.addEventListener('DOMContentLoaded', () => {
      const canvas = document.getElementById('particles-canvas');
      if (canvas) {
        new ParticleSystem(canvas);
      }
    });
  </script>
</BaseLayout>